TITLE:: Mesh Guide
categories:: Mesh, Live Coding
summary:: Simple framework for creating network-based collaborative performance environment.
related:: Guides/OSC_Communication

STRONG::Mesh Collaborative Framework::

An initial guide to creating a collaborative live-coding network environment.

SECTION:: Introduction

Mesh is a framework for the creation of networked music applications, and builds upon the work of the Utopia Quark, which in turn credits the Republic Quark and other existing network systems in SuperCollider.

image::image1.png::

SECTION:: Basic Building Blocks

The central class of Utopia is link::Classes/Mesh::. The Class provides an interface to create and access a stack of link::Classes/Mesh:: instances, which represent shared environments, each containing a collection of Classes/Vertex es

SECTION:: Creating a Mesh

definitionlist::
     ## Mesh
     || The link::Classes/Hail:: class allows for Peers to automatically discover each other on a network.
     ## Host
     || The link::Classes/Registrar::/link::Classes/Registrant:: classes allow for centralised discovery. Peers register with a central node, which announces any changes in membership to all Peers. This could for instance be running on a machine not being used for sound production to allow for stability in the event of a Peer crashing.
     ## Vertex
     || One can also manually populate an AddrBook, which can be useful in cases when IP addresses and/or participants are fixed and known.
::

SECTION:: Citizen Communication

Utopia provides a variety of classes for communicating different sorts of information between Peers:image::Tradtelefon.png#The Trådtelefon: A popular form of communication::

definitionlist::
     ## link::Classes/Chatter::
     || A class for text chat between Peers.
     ## link::Classes/CodeRelay::
     || Shares all code executed by a Peer with all other Peers in an AddrBook.
     ## link::Classes/SynthDescRelay::
     || Shares link::Classes/SynthDesc::s between Peers. (SynthDef sharing between multiple link::Classes/Server::s can be accomplished using link::Classes/SynthDescLib::.)
     ## link::Classes/OSCDataSpace::
     || A shared data space in the form of a dictionary of Open Sound Control data types (floats, ints, symbols).
     ## link::Classes/OSCObjectSpace::
     || A shared data space in the form of a dictionary of SC objects. Only archivable objects can be exchanged in this way, and there is no automatic syncing of changed state. Use with caution.
     ## link::Classes/ConductorClock::/link::Classes/FollowerClock::
     || A centralised approach to a shared time base. Each ConductorClock can have multiple followers.
     ## link::Classes/BeaconClock::
     || An experimental attempt at a clock using Reference Broadcast Synchronisation. Decentralised and flexible, this approach should adapt to changing membership.
::



SECTION:: Guarding the walls

The discovery classes described above can take an authenticator object as an argument, to test whether joining Peers have permission to join an AddrBook. Currently Utopia supplies two types:

definitionlist::
     ## link::Classes/ChallengeAuthenticator::
     || This uses a collection known to all participants as a challenge test. This could be something like the full text of War and Peace.
     ## link::Classes/GroupPasswordAuthenticator::
     || This uses a shared password to authenticate Peers attempting to join an AddrBook.
::

image::nonsuch.png#Some such palace or other...::GroupPasswordAuthenticator takes an encryptor as an argument, to prevent passwords being sent in plaintext. Encryptors can also be used by Utopia's chat, code-sharing, and data-sharing classes. There are currently two types:

definitionlist::
     ## link::Classes/NonEncryptor::
     || This is a no-op class which is used in cases where no encryption is needed.
     ## link::Classes/OpenSSLSymEncryptor::
     || This uses OpenSSL's symmetric key abilities to encrypt data using a shared password. This requires that you have OpenSSL installed in your path. (See link::http://www.openssl.org/::. OpenSSL comes standard on some operating systems.) The default cipher used is aes-128-cbc.
::


SECTION:: Expanding our borders

Utopia is currently an alpha release. It is an open source project and welcomes contibutions or suggestions. It is hosted at link::https://github.com/muellmusik/Utopia::. Please file any requests or issues there.

image::clt7166.png#Yet Another Utopia…::
